plugins {
    id 'java' //    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
//    id 'com.github.johnrengelman.shadow' version '6.1.0'//Bo qua de dong goi voi beryx
    id 'org.beryx.runtime' version '1.12.2'//For non-modular https://badass-runtime-plugin.beryx.org/releases/latest/
    //Dong goi: https://medium.com/@adam_carroll/java-packager-with-jdk11-31b3d620f4a8
    //Cai jdk15 de lay jpackage, set java_home den jdk15, cai wix Ä‘e tao file cai
    //Start with windows:https://stackoverflow.com/questions/5953525/run-java-application-at-windows-startup
    //https://stackoverflow.com/questions/26061217/application-start-on-logon-with-java
    //https://medium.com/@lk.snatch/jar-file-as-windows-service-bonus-jar-to-exe-1b7b179053e4
}

//group 'vn.mht.app'
//version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

application {
    mainClassName = 'vn.mht.app.desktop.Launcher'
//    mainClassName = 'xyz.vidieukhien.code.desktop.app.Main'
    applicationName = 'Z3Support'
//    applicationDefaultJvmArgs = ['-Dlogback.configurationFile=./logback.xml']
}

jar {
    manifest {
        attributes(
                'Main-Class': 'vn.mht.app.desktop.Launcher',
//                'Main-Class': 'xyz.vidieukhien.code.desktop.app.Main',
                'Implementation-Title': 'Gradle Jar File Example',
        )
    }
}

//
//task copyShadowLibs(type: Copy) {
//    from configurations.shadow
//    into 'build/libs'
//}
//
//shadowJar {
////De mac dinh de dong goi
////    baseName = 'app'
////    classifier = ''//all
////    archiveVersion = ''//0.1
//
//    manifest {
//        inheritFrom jar.manifest
//    }
//
//    minimize()
//
//    dependencies {
//
//    }
//}
//shadowJar.dependsOn(copyShadowLibs)
//

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':device')
    implementation project(':data')
//    implementation project(':business')
//    implementation project(':thirdparty')

    // GSON body parser
    implementation 'com.google.code.gson:gson:2.8.5'
// https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.13'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15to18
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15to18', version: '1.64'


    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.25'

    // https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
    implementation group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.19'

    implementation 'io.reactivex.rxjava2:rxjavafx:2.2.2'

    implementation 'com.google.dagger:dagger:2.29.1'

    annotationProcessor 'com.google.dagger:dagger-compiler:2.29.1'

//    // https://mvnrepository.com/artifact/org.openjfx/javafx-base
//    compile group: 'org.openjfx', name: 'javafx-base', version: '11.0.2'
//    compile group: 'org.openjfx', name: 'javafx-controls', version: '11.0.2'
//    compile group: 'org.openjfx', name: 'javafx-fxml', version: '11.0.2'
//    // https://mvnrepository.com/artifact/org.openjfx/javafx-graphics
//    compile group: 'org.openjfx', name: 'javafx-graphics', version: '11.0.2'


    compile 'com.jfoenix:jfoenix:9.0.10'

    // FontAwesome
    // Versions higher than 2.x are for Java 11
    compile 'org.kordamp.ikonli:ikonli-javafx:2.4.0'
    compile 'org.kordamp.ikonli:ikonli-fontawesome5-pack:2.4.0'

    // https://mvnrepository.com/artifact/log4j/log4j
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-1.2-api
    // compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.13.0'


// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

javafx {
    version = "14"//"15.0.1"
    modules = ['javafx.controls', 'javafx.fxml']
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']
        appVersion = "1.0.0"
        if (currentOs.windows) {
            installerType = 'exe'
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }

    }
}
tasks.runtime.doLast {
    copy {
        from('src/main/resources')
        into("$buildDir/image/bin")
    }
}

test {
    useJUnitPlatform()
}
